Geophysical Computing

Grading
  50% programming assignments
  50% use of course material in your own projects

Computer programs
  I must be able to compile and run your programs
    standard languages: C,C++,Fortran,Java,Python,Scala,Matlab,R
    freely available compilers: gcc,g++,gfortran,javac,fsc
    portable tools: cmake,ant,bash
  I will not always compile and run your programs
    too many different options
  I will ask you to compile and run your programs
    in class, for all to see
    be able to defend your decisions

Topics/Labs
  Benchmarking programming languages
      Java Stopwatch -> two other languages
      Java recursive smoother in the same
        benchmark for n = 1000 samples
  portable multi-language computing
    Python/Matlab -> C/C++/Fortran
    Jython/Scala -> Java
    build systems: Scons, CMake, Ant, ...
    test on Windows & MacOSX & Linux
  2D image processing with recursive filters
    compute and display 2D impulse response
    cascade to approximate Gaussian smoothing
    smooth your photo (or your data)
  multicore computing (from now on)
    compare OpenMP in C/C++/Fortran
    with one other method:
      Intel TBB in C++ 
      Scala parallel arrays
      Matlab Parallel Toolbox
  2D image processing with FFTs
    exponential and Gaussian smoothing with FFTs
    compare with recursive smoothing
  2D windows, correlations, and predictions
    detrending (subtracting the local mean)
    local prediction error filtering
      compare with one global filter
    structure tensors?
-----------------------------
  Code reviews - 10 minutes
-----------------------------
  Spatial interpolation with kriging
    uniformly grid some scattered data
      linear, smooth, and wavy anisotropic
      100, 1000, and 10000 samples
    LAPACK to solve linear systems
    local sliding windows
    error estimates with cross-validation
  Other spatial interpolation methods
    distance-weighted averaging
    radial basis functions (LAPACK, Wessel)
    nearest neighbor
    Matlab's gridders
  Spatial data structures
    KD-tree to find m nearest-neighbors
    speed up the sliding windows in gridders
    compare with Delaunay triangulation (Matlab, JTK, ???)
  Finite-difference approximations
    1D constant-velocity, variable-density
      compare SPD approximations with others
    2D variable velocity and density
      movie of waves propagating
  2D smoothing with spatially-varying filters
    implement edge-preserving smoothing
      implement CG solver for (I+G'DG)q = p
    smooth nearest-neighbor interpolations
      test for gridding example data
  Arrays too large to fit in memory
    implement Float3 with BlockedFloat3
-----------------------------
  Code reviews - 10 minutes
-----------------------------
